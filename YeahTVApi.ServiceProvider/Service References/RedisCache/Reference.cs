//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YeahTVApi.ServiceProvider.RedisCache {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RedisCache.IRedisCacheService")]
    public interface IRedisCacheService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/Get", ReplyAction="http://tempuri.org/IRedisCacheService/GetResponse")]
        string Get(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/Get", ReplyAction="http://tempuri.org/IRedisCacheService/GetResponse")]
        System.Threading.Tasks.Task<string> GetAsync(string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/Set", ReplyAction="http://tempuri.org/IRedisCacheService/SetResponse")]
        bool Set(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/Set", ReplyAction="http://tempuri.org/IRedisCacheService/SetResponse")]
        System.Threading.Tasks.Task<bool> SetAsync(string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/SetWithExpireIn", ReplyAction="http://tempuri.org/IRedisCacheService/SetWithExpireInResponse")]
        bool SetWithExpireIn(string key, string value, System.TimeSpan expiresIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/SetWithExpireIn", ReplyAction="http://tempuri.org/IRedisCacheService/SetWithExpireInResponse")]
        System.Threading.Tasks.Task<bool> SetWithExpireInAsync(string key, string value, System.TimeSpan expiresIn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/AddItemToSet", ReplyAction="http://tempuri.org/IRedisCacheService/AddItemToSetResponse")]
        void AddItemToSet(string setId, string item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/AddItemToSet", ReplyAction="http://tempuri.org/IRedisCacheService/AddItemToSetResponse")]
        System.Threading.Tasks.Task AddItemToSetAsync(string setId, string item);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/GetAllItemsFromSet", ReplyAction="http://tempuri.org/IRedisCacheService/GetAllItemsFromSetResponse")]
        string[] GetAllItemsFromSet(string setId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/GetAllItemsFromSet", ReplyAction="http://tempuri.org/IRedisCacheService/GetAllItemsFromSetResponse")]
        System.Threading.Tasks.Task<string[]> GetAllItemsFromSetAsync(string setId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/SetEntryInHash", ReplyAction="http://tempuri.org/IRedisCacheService/SetEntryInHashResponse")]
        bool SetEntryInHash(string hashId, string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/SetEntryInHash", ReplyAction="http://tempuri.org/IRedisCacheService/SetEntryInHashResponse")]
        System.Threading.Tasks.Task<bool> SetEntryInHashAsync(string hashId, string key, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/GetValueFromHash", ReplyAction="http://tempuri.org/IRedisCacheService/GetValueFromHashResponse")]
        string GetValueFromHash(string hashId, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/GetValueFromHash", ReplyAction="http://tempuri.org/IRedisCacheService/GetValueFromHashResponse")]
        System.Threading.Tasks.Task<string> GetValueFromHashAsync(string hashId, string key);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/GetValuesFromHash", ReplyAction="http://tempuri.org/IRedisCacheService/GetValuesFromHashResponse")]
        System.Collections.Generic.Dictionary<string, string> GetValuesFromHash(string hashId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/GetValuesFromHash", ReplyAction="http://tempuri.org/IRedisCacheService/GetValuesFromHashResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetValuesFromHashAsync(string hashId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/AddItemToSortSet", ReplyAction="http://tempuri.org/IRedisCacheService/AddItemToSortSetResponse")]
        bool AddItemToSortSet(string setId, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/AddItemToSortSet", ReplyAction="http://tempuri.org/IRedisCacheService/AddItemToSortSetResponse")]
        System.Threading.Tasks.Task<bool> AddItemToSortSetAsync(string setId, string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/GetAllItemsFromSortedSet", ReplyAction="http://tempuri.org/IRedisCacheService/GetAllItemsFromSortedSetResponse")]
        string[] GetAllItemsFromSortedSet(string setId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/GetAllItemsFromSortedSet", ReplyAction="http://tempuri.org/IRedisCacheService/GetAllItemsFromSortedSetResponse")]
        System.Threading.Tasks.Task<string[]> GetAllItemsFromSortedSetAsync(string setId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/GetRangeFromSortedSet", ReplyAction="http://tempuri.org/IRedisCacheService/GetRangeFromSortedSetResponse")]
        string[] GetRangeFromSortedSet(string setId, int fromRank, int toRank);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRedisCacheService/GetRangeFromSortedSet", ReplyAction="http://tempuri.org/IRedisCacheService/GetRangeFromSortedSetResponse")]
        System.Threading.Tasks.Task<string[]> GetRangeFromSortedSetAsync(string setId, int fromRank, int toRank);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRedisCacheServiceChannel : YeahTVApi.ServiceProvider.RedisCache.IRedisCacheService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RedisCacheServiceClient : System.ServiceModel.ClientBase<YeahTVApi.ServiceProvider.RedisCache.IRedisCacheService>, YeahTVApi.ServiceProvider.RedisCache.IRedisCacheService {
        
        public RedisCacheServiceClient() {
        }
        
        public RedisCacheServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RedisCacheServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RedisCacheServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RedisCacheServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Get(string key) {
            return base.Channel.Get(key);
        }
        
        public System.Threading.Tasks.Task<string> GetAsync(string key) {
            return base.Channel.GetAsync(key);
        }
        
        public bool Set(string key, string value) {
            return base.Channel.Set(key, value);
        }
        
        public System.Threading.Tasks.Task<bool> SetAsync(string key, string value) {
            return base.Channel.SetAsync(key, value);
        }
        
        public bool SetWithExpireIn(string key, string value, System.TimeSpan expiresIn) {
            return base.Channel.SetWithExpireIn(key, value, expiresIn);
        }
        
        public System.Threading.Tasks.Task<bool> SetWithExpireInAsync(string key, string value, System.TimeSpan expiresIn) {
            return base.Channel.SetWithExpireInAsync(key, value, expiresIn);
        }
        
        public void AddItemToSet(string setId, string item) {
            base.Channel.AddItemToSet(setId, item);
        }
        
        public System.Threading.Tasks.Task AddItemToSetAsync(string setId, string item) {
            return base.Channel.AddItemToSetAsync(setId, item);
        }
        
        public string[] GetAllItemsFromSet(string setId) {
            return base.Channel.GetAllItemsFromSet(setId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllItemsFromSetAsync(string setId) {
            return base.Channel.GetAllItemsFromSetAsync(setId);
        }
        
        public bool SetEntryInHash(string hashId, string key, string value) {
            return base.Channel.SetEntryInHash(hashId, key, value);
        }
        
        public System.Threading.Tasks.Task<bool> SetEntryInHashAsync(string hashId, string key, string value) {
            return base.Channel.SetEntryInHashAsync(hashId, key, value);
        }
        
        public string GetValueFromHash(string hashId, string key) {
            return base.Channel.GetValueFromHash(hashId, key);
        }
        
        public System.Threading.Tasks.Task<string> GetValueFromHashAsync(string hashId, string key) {
            return base.Channel.GetValueFromHashAsync(hashId, key);
        }
        
        public System.Collections.Generic.Dictionary<string, string> GetValuesFromHash(string hashId) {
            return base.Channel.GetValuesFromHash(hashId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetValuesFromHashAsync(string hashId) {
            return base.Channel.GetValuesFromHashAsync(hashId);
        }
        
        public bool AddItemToSortSet(string setId, string value) {
            return base.Channel.AddItemToSortSet(setId, value);
        }
        
        public System.Threading.Tasks.Task<bool> AddItemToSortSetAsync(string setId, string value) {
            return base.Channel.AddItemToSortSetAsync(setId, value);
        }
        
        public string[] GetAllItemsFromSortedSet(string setId) {
            return base.Channel.GetAllItemsFromSortedSet(setId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllItemsFromSortedSetAsync(string setId) {
            return base.Channel.GetAllItemsFromSortedSetAsync(setId);
        }
        
        public string[] GetRangeFromSortedSet(string setId, int fromRank, int toRank) {
            return base.Channel.GetRangeFromSortedSet(setId, fromRank, toRank);
        }
        
        public System.Threading.Tasks.Task<string[]> GetRangeFromSortedSetAsync(string setId, int fromRank, int toRank) {
            return base.Channel.GetRangeFromSortedSetAsync(setId, fromRank, toRank);
        }
    }
}
