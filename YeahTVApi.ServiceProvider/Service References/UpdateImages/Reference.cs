//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YeahTVApi.ServiceProvider.UpdateImages {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UpdateImages.IImageUpdate")]
    public interface IImageUpdate {
        
        // CODEGEN: Generating message contract since the wrapper name (RemoteFileInfo) of message RemoteFileInfo does not match the default value (UpdateImageByBitmapStream)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageUpdate/UpdateImageByBitmapStream", ReplyAction="http://tempuri.org/IImageUpdate/UpdateImageByBitmapStreamResponse")]
        YeahTVApi.ServiceProvider.UpdateImages.UpLoadRequest UpdateImageByBitmapStream(YeahTVApi.ServiceProvider.UpdateImages.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IImageUpdate/UpdateImageByBitmapStream", ReplyAction="http://tempuri.org/IImageUpdate/UpdateImageByBitmapStreamResponse")]
        System.IAsyncResult BeginUpdateImageByBitmapStream(YeahTVApi.ServiceProvider.UpdateImages.RemoteFileInfo request, System.AsyncCallback callback, object asyncState);
        
        YeahTVApi.ServiceProvider.UpdateImages.UpLoadRequest EndUpdateImageByBitmapStream(System.IAsyncResult result);
        
        // CODEGEN: Generating message contract since the wrapper name (RemoteFileInfo) of message RemoteFileInfo does not match the default value (UpdateAppByStream)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IImageUpdate/UpdateAppByStream", ReplyAction="http://tempuri.org/IImageUpdate/UpdateAppByStreamResponse")]
        YeahTVApi.ServiceProvider.UpdateImages.UpLoadRequest UpdateAppByStream(YeahTVApi.ServiceProvider.UpdateImages.RemoteFileInfo request);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IImageUpdate/UpdateAppByStream", ReplyAction="http://tempuri.org/IImageUpdate/UpdateAppByStreamResponse")]
        System.IAsyncResult BeginUpdateAppByStream(YeahTVApi.ServiceProvider.UpdateImages.RemoteFileInfo request, System.AsyncCallback callback, object asyncState);
        
        YeahTVApi.ServiceProvider.UpdateImages.UpLoadRequest EndUpdateAppByStream(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long FileLength;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileType;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public RemoteFileInfo() {
        }
        
        public RemoteFileInfo(long FileLength, string FileType, System.IO.Stream FileByteStream) {
            this.FileLength = FileLength;
            this.FileType = FileType;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="UpLoadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class UpLoadRequest {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public bool IsUpLoad;
        
        public UpLoadRequest() {
        }
        
        public UpLoadRequest(string FileName, bool IsUpLoad) {
            this.FileName = FileName;
            this.IsUpLoad = IsUpLoad;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IImageUpdateChannel : YeahTVApi.ServiceProvider.UpdateImages.IImageUpdate, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateImageByBitmapStreamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateImageByBitmapStreamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool IsUpLoad {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateAppByStreamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateAppByStreamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool IsUpLoad {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImageUpdateClient : System.ServiceModel.ClientBase<YeahTVApi.ServiceProvider.UpdateImages.IImageUpdate>, YeahTVApi.ServiceProvider.UpdateImages.IImageUpdate {
        
        private BeginOperationDelegate onBeginUpdateImageByBitmapStreamDelegate;
        
        private EndOperationDelegate onEndUpdateImageByBitmapStreamDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateImageByBitmapStreamCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateAppByStreamDelegate;
        
        private EndOperationDelegate onEndUpdateAppByStreamDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateAppByStreamCompletedDelegate;
        
        public ImageUpdateClient() {
        }
        
        public ImageUpdateClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ImageUpdateClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageUpdateClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ImageUpdateClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<UpdateImageByBitmapStreamCompletedEventArgs> UpdateImageByBitmapStreamCompleted;
        
        public event System.EventHandler<UpdateAppByStreamCompletedEventArgs> UpdateAppByStreamCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        YeahTVApi.ServiceProvider.UpdateImages.UpLoadRequest YeahTVApi.ServiceProvider.UpdateImages.IImageUpdate.UpdateImageByBitmapStream(YeahTVApi.ServiceProvider.UpdateImages.RemoteFileInfo request) {
            return base.Channel.UpdateImageByBitmapStream(request);
        }
        
        public string UpdateImageByBitmapStream(long FileLength, string FileType, System.IO.Stream FileByteStream, out bool IsUpLoad) {
            YeahTVApi.ServiceProvider.UpdateImages.RemoteFileInfo inValue = new YeahTVApi.ServiceProvider.UpdateImages.RemoteFileInfo();
            inValue.FileLength = FileLength;
            inValue.FileType = FileType;
            inValue.FileByteStream = FileByteStream;
            YeahTVApi.ServiceProvider.UpdateImages.UpLoadRequest retVal = ((YeahTVApi.ServiceProvider.UpdateImages.IImageUpdate)(this)).UpdateImageByBitmapStream(inValue);
            IsUpLoad = retVal.IsUpLoad;
            return retVal.FileName;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult YeahTVApi.ServiceProvider.UpdateImages.IImageUpdate.BeginUpdateImageByBitmapStream(YeahTVApi.ServiceProvider.UpdateImages.RemoteFileInfo request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateImageByBitmapStream(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateImageByBitmapStream(long FileLength, string FileType, System.IO.Stream FileByteStream, System.AsyncCallback callback, object asyncState) {
            YeahTVApi.ServiceProvider.UpdateImages.RemoteFileInfo inValue = new YeahTVApi.ServiceProvider.UpdateImages.RemoteFileInfo();
            inValue.FileLength = FileLength;
            inValue.FileType = FileType;
            inValue.FileByteStream = FileByteStream;
            return ((YeahTVApi.ServiceProvider.UpdateImages.IImageUpdate)(this)).BeginUpdateImageByBitmapStream(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        YeahTVApi.ServiceProvider.UpdateImages.UpLoadRequest YeahTVApi.ServiceProvider.UpdateImages.IImageUpdate.EndUpdateImageByBitmapStream(System.IAsyncResult result) {
            return base.Channel.EndUpdateImageByBitmapStream(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndUpdateImageByBitmapStream(System.IAsyncResult result, out bool IsUpLoad) {
            YeahTVApi.ServiceProvider.UpdateImages.UpLoadRequest retVal = ((YeahTVApi.ServiceProvider.UpdateImages.IImageUpdate)(this)).EndUpdateImageByBitmapStream(result);
            IsUpLoad = retVal.IsUpLoad;
            return retVal.FileName;
        }
        
        private System.IAsyncResult OnBeginUpdateImageByBitmapStream(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long FileLength = ((long)(inValues[0]));
            string FileType = ((string)(inValues[1]));
            System.IO.Stream FileByteStream = ((System.IO.Stream)(inValues[2]));
            return this.BeginUpdateImageByBitmapStream(FileLength, FileType, FileByteStream, callback, asyncState);
        }
        
        private object[] OnEndUpdateImageByBitmapStream(System.IAsyncResult result) {
            bool IsUpLoad = this.GetDefaultValueForInitialization<bool>();
            string retVal = this.EndUpdateImageByBitmapStream(result, out IsUpLoad);
            return new object[] {
                    IsUpLoad,
                    retVal};
        }
        
        private void OnUpdateImageByBitmapStreamCompleted(object state) {
            if ((this.UpdateImageByBitmapStreamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateImageByBitmapStreamCompleted(this, new UpdateImageByBitmapStreamCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateImageByBitmapStreamAsync(long FileLength, string FileType, System.IO.Stream FileByteStream) {
            this.UpdateImageByBitmapStreamAsync(FileLength, FileType, FileByteStream, null);
        }
        
        public void UpdateImageByBitmapStreamAsync(long FileLength, string FileType, System.IO.Stream FileByteStream, object userState) {
            if ((this.onBeginUpdateImageByBitmapStreamDelegate == null)) {
                this.onBeginUpdateImageByBitmapStreamDelegate = new BeginOperationDelegate(this.OnBeginUpdateImageByBitmapStream);
            }
            if ((this.onEndUpdateImageByBitmapStreamDelegate == null)) {
                this.onEndUpdateImageByBitmapStreamDelegate = new EndOperationDelegate(this.OnEndUpdateImageByBitmapStream);
            }
            if ((this.onUpdateImageByBitmapStreamCompletedDelegate == null)) {
                this.onUpdateImageByBitmapStreamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateImageByBitmapStreamCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateImageByBitmapStreamDelegate, new object[] {
                        FileLength,
                        FileType,
                        FileByteStream}, this.onEndUpdateImageByBitmapStreamDelegate, this.onUpdateImageByBitmapStreamCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        YeahTVApi.ServiceProvider.UpdateImages.UpLoadRequest YeahTVApi.ServiceProvider.UpdateImages.IImageUpdate.UpdateAppByStream(YeahTVApi.ServiceProvider.UpdateImages.RemoteFileInfo request) {
            return base.Channel.UpdateAppByStream(request);
        }
        
        public string UpdateAppByStream(long FileLength, string FileType, System.IO.Stream FileByteStream, out bool IsUpLoad) {
            YeahTVApi.ServiceProvider.UpdateImages.RemoteFileInfo inValue = new YeahTVApi.ServiceProvider.UpdateImages.RemoteFileInfo();
            inValue.FileLength = FileLength;
            inValue.FileType = FileType;
            inValue.FileByteStream = FileByteStream;
            YeahTVApi.ServiceProvider.UpdateImages.UpLoadRequest retVal = ((YeahTVApi.ServiceProvider.UpdateImages.IImageUpdate)(this)).UpdateAppByStream(inValue);
            IsUpLoad = retVal.IsUpLoad;
            return retVal.FileName;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult YeahTVApi.ServiceProvider.UpdateImages.IImageUpdate.BeginUpdateAppByStream(YeahTVApi.ServiceProvider.UpdateImages.RemoteFileInfo request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateAppByStream(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateAppByStream(long FileLength, string FileType, System.IO.Stream FileByteStream, System.AsyncCallback callback, object asyncState) {
            YeahTVApi.ServiceProvider.UpdateImages.RemoteFileInfo inValue = new YeahTVApi.ServiceProvider.UpdateImages.RemoteFileInfo();
            inValue.FileLength = FileLength;
            inValue.FileType = FileType;
            inValue.FileByteStream = FileByteStream;
            return ((YeahTVApi.ServiceProvider.UpdateImages.IImageUpdate)(this)).BeginUpdateAppByStream(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        YeahTVApi.ServiceProvider.UpdateImages.UpLoadRequest YeahTVApi.ServiceProvider.UpdateImages.IImageUpdate.EndUpdateAppByStream(System.IAsyncResult result) {
            return base.Channel.EndUpdateAppByStream(result);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndUpdateAppByStream(System.IAsyncResult result, out bool IsUpLoad) {
            YeahTVApi.ServiceProvider.UpdateImages.UpLoadRequest retVal = ((YeahTVApi.ServiceProvider.UpdateImages.IImageUpdate)(this)).EndUpdateAppByStream(result);
            IsUpLoad = retVal.IsUpLoad;
            return retVal.FileName;
        }
        
        private System.IAsyncResult OnBeginUpdateAppByStream(object[] inValues, System.AsyncCallback callback, object asyncState) {
            long FileLength = ((long)(inValues[0]));
            string FileType = ((string)(inValues[1]));
            System.IO.Stream FileByteStream = ((System.IO.Stream)(inValues[2]));
            return this.BeginUpdateAppByStream(FileLength, FileType, FileByteStream, callback, asyncState);
        }
        
        private object[] OnEndUpdateAppByStream(System.IAsyncResult result) {
            bool IsUpLoad = this.GetDefaultValueForInitialization<bool>();
            string retVal = this.EndUpdateAppByStream(result, out IsUpLoad);
            return new object[] {
                    IsUpLoad,
                    retVal};
        }
        
        private void OnUpdateAppByStreamCompleted(object state) {
            if ((this.UpdateAppByStreamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateAppByStreamCompleted(this, new UpdateAppByStreamCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateAppByStreamAsync(long FileLength, string FileType, System.IO.Stream FileByteStream) {
            this.UpdateAppByStreamAsync(FileLength, FileType, FileByteStream, null);
        }
        
        public void UpdateAppByStreamAsync(long FileLength, string FileType, System.IO.Stream FileByteStream, object userState) {
            if ((this.onBeginUpdateAppByStreamDelegate == null)) {
                this.onBeginUpdateAppByStreamDelegate = new BeginOperationDelegate(this.OnBeginUpdateAppByStream);
            }
            if ((this.onEndUpdateAppByStreamDelegate == null)) {
                this.onEndUpdateAppByStreamDelegate = new EndOperationDelegate(this.OnEndUpdateAppByStream);
            }
            if ((this.onUpdateAppByStreamCompletedDelegate == null)) {
                this.onUpdateAppByStreamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateAppByStreamCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateAppByStreamDelegate, new object[] {
                        FileLength,
                        FileType,
                        FileByteStream}, this.onEndUpdateAppByStreamDelegate, this.onUpdateAppByStreamCompletedDelegate, userState);
        }
    }
}
