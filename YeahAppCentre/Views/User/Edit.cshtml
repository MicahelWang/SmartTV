@model  ErpSysUser

@{
    OpType opType = ViewBag.OpType;
}
<script type="text/javascript">

    $(function () {
        $("form").removeData("validator").removeData("unobtrusiveValidation");
        $.validator.unobtrusive.parse($("form"));
    });

</script>

@using (Ajax.BeginForm("Edit", new { }, new AjaxOptions
{
    HttpMethod = "Post",
    OnSuccess = "Success",

    //    OnBegin = "formValidate",
}, new { @class = "form-horizontal", role = "form" }))
{
    <input type="hidden" name="opType" value="@opType.GetValueStr()" />
    @Html.HiddenFor(m => m.Id) 
    @Html.Hidden("permition")
    <div class="form-group">
        @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.UserType, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.UserType, DropDownExtensions.GetSelectList(typeof(UserTypeEnum)), new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.RoleId, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.RoleId, ViewBag.Roles as IEnumerable<SelectListItem>, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.State, DropDownExtensions.GetSelectList(typeof(StateEnum)), new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="modal-footer" style="margin-top:0px;">
        @if (opType == OpType.Add || opType == OpType.Update)
        {
            <input type="submit" class="btn btn-success" value="提交" />
        }
        <button type="button" class="btn btn-default" onclick="history.go(-1);">取消</button>
    </div>

}
@if (opType == OpType.View)
{
    <script>
        SetKeyReadonly();
    </script>
}
@if (opType != OpType.Add)
{
    <script>
        $(document).ready(function () {
            var groupId = $("#GroupId").val();
            var hotelObj = $("#HotelId");
            var _hotel = "@Model.HotelId";
            //HotelFromGroup(groupId, hotelObj, _hotel);
            console.log(_hotel);
        });
    </script>

}