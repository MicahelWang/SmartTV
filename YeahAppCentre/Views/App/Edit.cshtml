@model  AppVersion

@{
    OpType opType = ViewBag.OpType;
}
<script type="text/javascript">

    $(function () {
        $("form").removeData("validator").removeData("unobtrusiveValidation");
        $.validator.unobtrusive.parse($("form"));
        Initial();
    });
    function Initial() {
        if ($("#IsLocalFileAddress").is(":checked")) {
            $("#upLoadFile").fadeOut("fast");
        }
        else {
            $("#upLoadFile").fadeIn("fast");
        }
    }
</script>

@using (Ajax.BeginForm("Edit", new { }, new AjaxOptions
{
    HttpMethod = "Post",
    OnSuccess = "Success",

    //    OnBegin = "formValidate",
}, new { @class = "form-horizontal", role = "form" }))
{
    <input type="hidden" name="opType" value="@opType.GetValueStr()" />
    @Html.HiddenFor(m => m.Id)
    if (opType == OpType.Add)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.IsLocalFileAddress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.CheckBoxFor(model => model.IsLocalFileAddress)
            </div>
        </div>
    }

    <div class="form-group">
        @Html.LabelFor(model => model.App.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.App.Name, new { htmlAttributes = new { @class = "form-control " } })
        </div>
    </div>

    if (opType.Equals(OpType.View))
    {
        <div class="form-group">
            @Html.LabelFor(model => model.App.AppKey, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.App.AppKey, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.App.SecureKey, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.EditorFor(model => model.App.SecureKey, new { htmlAttributes = new { @class = "form-control" } })
            </div>
        </div>
    }
    else
    {
        @Html.HiddenFor(m => m.App.Id)
        @Html.HiddenFor(m => m.App.AppKey)
        @Html.HiddenFor(m => m.App.SecureKey)
    }

    <div class="form-group">
        @Html.LabelFor(model => model.VersionCode, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.VersionCode, new { htmlAttributes = new { @class = "form-control auto_readonly" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.VersionName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.VersionName, new { htmlAttributes = new { @class = "form-control auto_readonly" } })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.App.PackageName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.App.PackageName, new { htmlAttributes = new { @class = "form-control auto_readonly" } })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.AppUrl, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.AppUrl, new { htmlAttributes = new { @class = "form-control auto_readonly" } })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.App.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.App.Description, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.FileName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.FileName, new { htmlAttributes = new { @class = "form-control auto_readonly" } })
        </div>
    </div>
    <div class="form-group">
        @Html.HiddenFor(model => model.App.IconUrl, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.HiddenFor(model => model.App.IconUrl, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.App.IsSystem, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.CheckBoxFor(model => model.App.IsSystem, new { @checked = true })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "control-label col-md-2 " })
        <div class="col-md-10">
            @Html.CheckBoxFor(model => model.Active, new { @checked = true })
        </div>
    </div>
    <div class="form-group" id="upLoadFile">
        <label class="control-label col-md-2" for="Icon">APP</label>
        <div class="col-md-10">
            <button id="uploadIcon" type="button">上传APP</button>
        </div>
    </div>

}
@if (opType == OpType.View)
{
    <script>
        SetKeyReadonly();
        $("#uploadIcon").attr("disabled", "disabled").css("cursor", "not-allowed");
    </script>
}
@if (opType == OpType.Update)
{
    <script>
        $("#uploadIcon").attr("disabled", "disabled").css("cursor", "not-allowed");
        $("#App_Name").attr("readonly", "readonly");
        $("#VersionCode").attr("readonly", "readonly");
        $("#VersionName").attr("readonly", "readonly");
        $("#App_PackageName").attr("readonly", "readonly");
        $("#AppUrl").attr("readonly", "readonly");
        $("#App_Description").attr("readonly", "readonly");
        $("#FileName").attr("readonly", "readonly");
        $("#App_IsSystem").attr("disabled", "disabled");
        
    </script>
}

<script>
    var setting = {
        callback: uploadResultExcute
    };
    $("#uploadIcon").binduploadifyForAndriod(setting);
</script>