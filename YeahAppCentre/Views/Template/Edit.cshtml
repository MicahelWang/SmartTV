@model TvTemplate
@{
    OpType opType = ViewBag.OpType;
}
<script type="text/javascript">

    $(function () {
        $("form").removeData("validator").removeData("unobtrusiveValidation");
        $.validator.unobtrusive.parse($("form"));
    });

</script>

@using (Ajax.BeginForm("Edit", new { }, new AjaxOptions
{
    HttpMethod = "Post",
    OnSuccess = "Success",

    //    OnBegin = "formValidate",
}, new { @class = "form-horizontal", role = "form" }))
{
    <input type="hidden" name="opType" value="@opType.GetValueStr()" />
    @Html.HiddenFor(m => m.Id)
    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2" for="Category">模板结构</label>
            <div class="col-md-10">
                @if (opType == OpType.Add)
                {
                    @Html.DropDownListFor(m => m.TemplateTypeId, ViewBag.TemplateTypes as IEnumerable<SelectListItem>, new { @class = "form-control" })
                }
                else
                {
                    @Html.LabelFor(model => model.TemplateType, Model.TemplateType!=null?Model.TemplateType.Name:"", htmlAttributes: new { @class = "control-label" })
                }

            </div>
        </div>

        @if (opType == OpType.View)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.CreateUser, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CreateUser, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CreateDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CreateDate, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.ModifyUser, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ModifyUser, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ModifyDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ModifyDate, new { htmlAttributes = new { @class = "form-control" } })
                </div>
            </div>
        }
    </div>
}
@if (opType == OpType.View)
{
    <script>
        SetKeyReadonly();
    </script>
}
