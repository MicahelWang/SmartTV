@model YeahTVApi.DomainModel.Models.SystemConfig
@{
    OpType opType = ViewBag.OpType;
}
<script type="text/javascript">

    $(function () {
        $("form").removeData("validator").removeData("unobtrusiveValidation");
        $.validator.unobtrusive.parse($("form"));
    });

</script>
@using (Ajax.BeginForm("AddOrEdit", new { }, new AjaxOptions
{
    HttpMethod = "Post",
    OnSuccess = "Success",

    //    OnBegin = "formValidate",
}, new { @class = "form-horizontal", role = "form" }))
{
    // @Html.AntiForgeryToken()
    <input type="hidden" name="opType" value="@opType.GetValueStr()" />
    @Html.HiddenFor(m => m.Id)
    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ConfigName, htmlAttributes: new { @class = "control-label col-md-2 " })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ConfigName, new { htmlAttributes = new { @class = "form-control editClass" } })
                @Html.ValidationMessageFor(model => model.ConfigName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConfigValue, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ConfigValue, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ConfigValue, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ConfigType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*@Html.EditorFor(model => model.ConfigType, new { htmlAttributes = new { @class = "form-control" } })*@

                @Html.DropDownListFor(model => model.ConfigType, ViewBag.DefaultSelect as IEnumerable<SelectListItem>, new { htmlAttributes = new { @class = "form-control" } })

                @Html.ValidationMessageFor(model => model.ConfigType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.AppId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @Html.HiddenFor(model => model.AppId)

                @Html.TextBox("AppName", Html.Action("GetAppName", "Unity", new { appId = (Model != null ? Model.AppId : "") }), new { @class = "form-control"})
                @Html.ValidationMessageFor(model => model.AppId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.Active)
                    @Html.ValidationMessageFor(model => model.Active, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
}
@Scripts.Render("~/bundles/GetHotelNames")

@if (opType == OpType.View)
{
    <script>
        SetKeyReadonly();
    </script>
}
@if (opType == OpType.Update)
{
    <script>
        $(".editClass").attr("readonly","readonly");
    </script>
}
<script>
    GetAppNames('@Url.Action("GetAppNames", "Unity")', $("#AppName"), $("#AppId"));
</script>
